package org.hittepit.smapapi.mapper

import java.sql.PreparedStatement
import java.sql.ResultSet

trait ColumnName {
  val name:String
}

trait ColumnType[P]{
	val sqlType:SqlType[P]
}


class ColumnDef[E,P](val name:String, val sqlType:SqlType[P]) extends ColumnType[P] with ColumnName{
  def <~(getProperty:E=>P):ColumnDefinition[E,P] = new ColumnDefinition[E,P](this.name,this.sqlType,getProperty)
}

class ColumnDefinition[E, P](n:String, st:SqlType[P], val g: E=>P) extends ColumnType[P] with ColumnName{
  val name=n
  val sqlType = st
  val getter = g
  def value(t: E): P = getter(t)

  def value(implicit rs: ResultSet) = sqlType.getColumnValue(rs,Left(name))
  
  def value(index:Int)(implicit rs: ResultSet) = sqlType.getColumnValue(rs,Right(index))
  
  def setValue(index:Int, entity:E)(implicit ps:PreparedStatement) = {
	  val v = value(entity)
	  sqlType.setColumnValue(index, v,ps)
	}
}


class PrimaryKeyColumnDefinition[E,P](n:String, st:SqlType[P], g: E=>P) extends ColumnDefinition[E,P](n,st,g){
  
  def ~>(setProperty:(E,P)=>E):AutoGeneratedColumn[E,P] = new AutoGeneratedColumn[E,P](this.name,this.sqlType, this.getter,setProperty)
}


class AutoGeneratedColumn[E,P](n:String, st:SqlType[P], g: E=>P, s:(E,P) => E) extends PrimaryKeyColumnDefinition[E,P](n,st,g){
  val setter:(E,P) => E =s
}