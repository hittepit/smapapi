package org.hittepit.smapapi.mapper

import org.scalatest.WordSpec
import org.scalatest.MustMatchers
import org.slf4j.LoggerFactory
import org.scalatest.BeforeAndAfterAll
import org.scalatest.BeforeAndAfter
import org.hittepit.smapapi.transaction.TransactionManager
import org.scalatest.mock.MockitoSugar

class TestColumnObject extends WordSpec with MustMatchers with  MockitoSugar{
  val logger = LoggerFactory.getLogger(classOf[TestColumnObject])
  val mapper = new BookMapper(mock[TransactionManager])

  "The Column:apply method" when{
    "invoked with a name and a SqlType" must {
      "return a initialzed ColumnDef" in {
        val c = mapper.Column("test",NotNullableVarchar)
        c.name must be("test")
        c.sqlType must be(NotNullableVarchar)
      }
    }
  }
  
  "The <~ method of a ColumnDef" when {
    "invoked with a getter method" must {
      "return a fully initialized ColumnDefinition instance" in {
        val c = mapper.Column("test",NotNullableVarchar)
        val getter = (b:Book) => b.title
        val cdef = c <~ getter
        cdef.name must be("test")
        cdef.sqlType must be(NotNullableVarchar)
        cdef.getter must be(getter)
      }
    }
  }
  
  "The PrimaryKey:apply" when {
    "invoked with a columnDef" must {
      "retuun an initialized PrimaryKeyColumnDefinition" in {
        val c = mapper.Column("test",NotNullableVarchar)
        val getter = (b:Book) => b.title
        val cdef = c <~ getter

        val primaryKey = mapper.PrimaryKey(cdef)
        primaryKey.name must be("test")
        primaryKey.sqlType must be(NotNullableVarchar)
        primaryKey.getter must be(getter)
      }
    }
  }
  
  "The ~> method of a PrimaryKey" when {
    "invoked with a setter method" must {
      "return a fully initialized AutoGeneratedColumn" in {
        val c = mapper.Column("test",NotNullableVarchar)
        val getter = (b:Book) => b.title
        val cdef = c <~ getter
        val primaryKey = mapper.PrimaryKey(cdef)
        val setter = (b:Book,t:String) => new Book(b.id,b.isbn,t,b.author,b.price)
        
        val auto = primaryKey ~> setter
        
        auto.name must be("test")
        auto.sqlType must be(NotNullableVarchar)
        auto.getter must be(getter)
        auto.setter must be(setter)
      }
    }
  }
}